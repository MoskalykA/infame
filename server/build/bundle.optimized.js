(()=>{"use strict";var e={274:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.default={identifier:{name:"discord"},character:{enabled:!0}}},240:function(e,t,r){var o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=o(r(274));AddEventHandler("playerConnecting",((e,t,r)=>{r.defer(),getPlayerIdentifiers(source).findIndex((e=>e.startsWith(n.default.identifier.name)))>-1?r.done():(r.done(`You do not have an open ${n.default.identifier.name} so you are not able to join the server.`),CancelEvent())}))},901:()=>{AddEventHandler("playerJoining",(e=>{emitNet("infame.nets.playerJoining",e)}))},375:(e,t,r)=>{const o=r(117);onNet("infame.nets.characters.selectCharacter",(e=>{(0,o.selectCharacter)(source.toString(),e)}))},207:(e,t)=>{},117:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.selectCharacter=void 0;const r={health:200,armor:100,model:2488675799,weapons:[1593441988,1649403952],position:{x:0,y:0,z:0}};t.selectCharacter=(e,t)=>{SetPlayerModel(e,r.model),setTimeout((()=>{emitNet("infame.nets.characters.setHealth",e,r.health);const t=GetPlayerPed(e);SetPedArmour(t,r.armor),SetEntityCoords(t,r.position.x,r.position.y,r.position.z,!0,!1,!1,!0),RemoveAllPedWeapons(t,!1),r.weapons.map((e=>{GiveWeaponToPed(t,e,100,!1,!1)}))}),500)}}},t={};function r(o){var n=t[o];if(void 0!==n)return n.exports;var a=t[o]={exports:{}};return e[o].call(a.exports,a,a.exports,r),a.exports}r(274),r(240),r(901),r(375),r(117),r(207)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,